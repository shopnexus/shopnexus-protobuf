// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: account/v1/service.proto

package accountv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shopnexus/shopnexus-protobuf-gen-go/pb/account/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "account.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceGetUserProcedure is the fully-qualified name of the AccountService's GetUser RPC.
	AccountServiceGetUserProcedure = "/account.v1.AccountService/GetUser"
	// AccountServiceGetAdminProcedure is the fully-qualified name of the AccountService's GetAdmin RPC.
	AccountServiceGetAdminProcedure = "/account.v1.AccountService/GetAdmin"
	// AccountServiceGetUserPublicProcedure is the fully-qualified name of the AccountService's
	// GetUserPublic RPC.
	AccountServiceGetUserPublicProcedure = "/account.v1.AccountService/GetUserPublic"
	// AccountServiceUpdateAccountProcedure is the fully-qualified name of the AccountService's
	// UpdateAccount RPC.
	AccountServiceUpdateAccountProcedure = "/account.v1.AccountService/UpdateAccount"
	// AccountServiceUpdateUserProcedure is the fully-qualified name of the AccountService's UpdateUser
	// RPC.
	AccountServiceUpdateUserProcedure = "/account.v1.AccountService/UpdateUser"
	// AccountServiceLoginUserProcedure is the fully-qualified name of the AccountService's LoginUser
	// RPC.
	AccountServiceLoginUserProcedure = "/account.v1.AccountService/LoginUser"
	// AccountServiceLoginAdminProcedure is the fully-qualified name of the AccountService's LoginAdmin
	// RPC.
	AccountServiceLoginAdminProcedure = "/account.v1.AccountService/LoginAdmin"
	// AccountServiceRegisterUserProcedure is the fully-qualified name of the AccountService's
	// RegisterUser RPC.
	AccountServiceRegisterUserProcedure = "/account.v1.AccountService/RegisterUser"
	// AccountServiceRegisterAdminProcedure is the fully-qualified name of the AccountService's
	// RegisterAdmin RPC.
	AccountServiceRegisterAdminProcedure = "/account.v1.AccountService/RegisterAdmin"
	// AccountServiceGetCartProcedure is the fully-qualified name of the AccountService's GetCart RPC.
	AccountServiceGetCartProcedure = "/account.v1.AccountService/GetCart"
	// AccountServiceAddCartItemProcedure is the fully-qualified name of the AccountService's
	// AddCartItem RPC.
	AccountServiceAddCartItemProcedure = "/account.v1.AccountService/AddCartItem"
	// AccountServiceUpdateCartItemProcedure is the fully-qualified name of the AccountService's
	// UpdateCartItem RPC.
	AccountServiceUpdateCartItemProcedure = "/account.v1.AccountService/UpdateCartItem"
	// AccountServiceClearCartProcedure is the fully-qualified name of the AccountService's ClearCart
	// RPC.
	AccountServiceClearCartProcedure = "/account.v1.AccountService/ClearCart"
	// AccountServiceGetAddressProcedure is the fully-qualified name of the AccountService's GetAddress
	// RPC.
	AccountServiceGetAddressProcedure = "/account.v1.AccountService/GetAddress"
	// AccountServiceListAddressesProcedure is the fully-qualified name of the AccountService's
	// ListAddresses RPC.
	AccountServiceListAddressesProcedure = "/account.v1.AccountService/ListAddresses"
	// AccountServiceCreateAddressProcedure is the fully-qualified name of the AccountService's
	// CreateAddress RPC.
	AccountServiceCreateAddressProcedure = "/account.v1.AccountService/CreateAddress"
	// AccountServiceUpdateAddressProcedure is the fully-qualified name of the AccountService's
	// UpdateAddress RPC.
	AccountServiceUpdateAddressProcedure = "/account.v1.AccountService/UpdateAddress"
	// AccountServiceDeleteAddressProcedure is the fully-qualified name of the AccountService's
	// DeleteAddress RPC.
	AccountServiceDeleteAddressProcedure = "/account.v1.AccountService/DeleteAddress"
)

// AccountServiceClient is a client for the account.v1.AccountService service.
type AccountServiceClient interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	GetAdmin(context.Context, *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error)
	GetUserPublic(context.Context, *connect.Request[v1.GetUserPublicRequest]) (*connect.Response[v1.GetUserPublicResponse], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Login, register
	LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error)
	LoginAdmin(context.Context, *connect.Request[v1.LoginAdminRequest]) (*connect.Response[v1.LoginAdminResponse], error)
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	RegisterAdmin(context.Context, *connect.Request[v1.RegisterAdminRequest]) (*connect.Response[v1.RegisterAdminResponse], error)
	// Cart
	GetCart(context.Context, *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.GetCartResponse], error)
	AddCartItem(context.Context, *connect.Request[v1.AddCartItemRequest]) (*connect.Response[v1.AddCartItemResponse], error)
	UpdateCartItem(context.Context, *connect.Request[v1.UpdateCartItemRequest]) (*connect.Response[v1.UpdateCartItemResponse], error)
	ClearCart(context.Context, *connect.Request[v1.ClearCartRequest]) (*connect.Response[v1.ClearCartResponse], error)
	// Address
	GetAddress(context.Context, *connect.Request[v1.GetAddressRequest]) (*connect.Response[v1.GetAddressResponse], error)
	ListAddresses(context.Context, *connect.Request[v1.ListAddressesRequest]) (*connect.Response[v1.ListAddressesResponse], error)
	CreateAddress(context.Context, *connect.Request[v1.CreateAddressRequest]) (*connect.Response[v1.CreateAddressResponse], error)
	UpdateAddress(context.Context, *connect.Request[v1.UpdateAddressRequest]) (*connect.Response[v1.UpdateAddressResponse], error)
	DeleteAddress(context.Context, *connect.Request[v1.DeleteAddressRequest]) (*connect.Response[v1.DeleteAddressResponse], error)
}

// NewAccountServiceClient constructs a client for the account.v1.AccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := v1.File_account_v1_service_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		getUser: connect.NewClient[v1.GetUserRequest, v1.GetUserResponse](
			httpClient,
			baseURL+AccountServiceGetUserProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetUser")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAdmin: connect.NewClient[v1.GetAdminRequest, v1.GetAdminResponse](
			httpClient,
			baseURL+AccountServiceGetAdminProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAdmin")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getUserPublic: connect.NewClient[v1.GetUserPublicRequest, v1.GetUserPublicResponse](
			httpClient,
			baseURL+AccountServiceGetUserPublicProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetUserPublic")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[v1.UpdateAccountRequest, v1.UpdateAccountResponse](
			httpClient,
			baseURL+AccountServiceUpdateAccountProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdateAccount")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserRequest, v1.UpdateUserResponse](
			httpClient,
			baseURL+AccountServiceUpdateUserProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		loginUser: connect.NewClient[v1.LoginUserRequest, v1.LoginUserResponse](
			httpClient,
			baseURL+AccountServiceLoginUserProcedure,
			connect.WithSchema(accountServiceMethods.ByName("LoginUser")),
			connect.WithClientOptions(opts...),
		),
		loginAdmin: connect.NewClient[v1.LoginAdminRequest, v1.LoginAdminResponse](
			httpClient,
			baseURL+AccountServiceLoginAdminProcedure,
			connect.WithSchema(accountServiceMethods.ByName("LoginAdmin")),
			connect.WithClientOptions(opts...),
		),
		registerUser: connect.NewClient[v1.RegisterUserRequest, v1.RegisterUserResponse](
			httpClient,
			baseURL+AccountServiceRegisterUserProcedure,
			connect.WithSchema(accountServiceMethods.ByName("RegisterUser")),
			connect.WithClientOptions(opts...),
		),
		registerAdmin: connect.NewClient[v1.RegisterAdminRequest, v1.RegisterAdminResponse](
			httpClient,
			baseURL+AccountServiceRegisterAdminProcedure,
			connect.WithSchema(accountServiceMethods.ByName("RegisterAdmin")),
			connect.WithClientOptions(opts...),
		),
		getCart: connect.NewClient[v1.GetCartRequest, v1.GetCartResponse](
			httpClient,
			baseURL+AccountServiceGetCartProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetCart")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		addCartItem: connect.NewClient[v1.AddCartItemRequest, v1.AddCartItemResponse](
			httpClient,
			baseURL+AccountServiceAddCartItemProcedure,
			connect.WithSchema(accountServiceMethods.ByName("AddCartItem")),
			connect.WithClientOptions(opts...),
		),
		updateCartItem: connect.NewClient[v1.UpdateCartItemRequest, v1.UpdateCartItemResponse](
			httpClient,
			baseURL+AccountServiceUpdateCartItemProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdateCartItem")),
			connect.WithClientOptions(opts...),
		),
		clearCart: connect.NewClient[v1.ClearCartRequest, v1.ClearCartResponse](
			httpClient,
			baseURL+AccountServiceClearCartProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ClearCart")),
			connect.WithClientOptions(opts...),
		),
		getAddress: connect.NewClient[v1.GetAddressRequest, v1.GetAddressResponse](
			httpClient,
			baseURL+AccountServiceGetAddressProcedure,
			connect.WithSchema(accountServiceMethods.ByName("GetAddress")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listAddresses: connect.NewClient[v1.ListAddressesRequest, v1.ListAddressesResponse](
			httpClient,
			baseURL+AccountServiceListAddressesProcedure,
			connect.WithSchema(accountServiceMethods.ByName("ListAddresses")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createAddress: connect.NewClient[v1.CreateAddressRequest, v1.CreateAddressResponse](
			httpClient,
			baseURL+AccountServiceCreateAddressProcedure,
			connect.WithSchema(accountServiceMethods.ByName("CreateAddress")),
			connect.WithClientOptions(opts...),
		),
		updateAddress: connect.NewClient[v1.UpdateAddressRequest, v1.UpdateAddressResponse](
			httpClient,
			baseURL+AccountServiceUpdateAddressProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdateAddress")),
			connect.WithClientOptions(opts...),
		),
		deleteAddress: connect.NewClient[v1.DeleteAddressRequest, v1.DeleteAddressResponse](
			httpClient,
			baseURL+AccountServiceDeleteAddressProcedure,
			connect.WithSchema(accountServiceMethods.ByName("DeleteAddress")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	getUser        *connect.Client[v1.GetUserRequest, v1.GetUserResponse]
	getAdmin       *connect.Client[v1.GetAdminRequest, v1.GetAdminResponse]
	getUserPublic  *connect.Client[v1.GetUserPublicRequest, v1.GetUserPublicResponse]
	updateAccount  *connect.Client[v1.UpdateAccountRequest, v1.UpdateAccountResponse]
	updateUser     *connect.Client[v1.UpdateUserRequest, v1.UpdateUserResponse]
	loginUser      *connect.Client[v1.LoginUserRequest, v1.LoginUserResponse]
	loginAdmin     *connect.Client[v1.LoginAdminRequest, v1.LoginAdminResponse]
	registerUser   *connect.Client[v1.RegisterUserRequest, v1.RegisterUserResponse]
	registerAdmin  *connect.Client[v1.RegisterAdminRequest, v1.RegisterAdminResponse]
	getCart        *connect.Client[v1.GetCartRequest, v1.GetCartResponse]
	addCartItem    *connect.Client[v1.AddCartItemRequest, v1.AddCartItemResponse]
	updateCartItem *connect.Client[v1.UpdateCartItemRequest, v1.UpdateCartItemResponse]
	clearCart      *connect.Client[v1.ClearCartRequest, v1.ClearCartResponse]
	getAddress     *connect.Client[v1.GetAddressRequest, v1.GetAddressResponse]
	listAddresses  *connect.Client[v1.ListAddressesRequest, v1.ListAddressesResponse]
	createAddress  *connect.Client[v1.CreateAddressRequest, v1.CreateAddressResponse]
	updateAddress  *connect.Client[v1.UpdateAddressRequest, v1.UpdateAddressResponse]
	deleteAddress  *connect.Client[v1.DeleteAddressRequest, v1.DeleteAddressResponse]
}

// GetUser calls account.v1.AccountService.GetUser.
func (c *accountServiceClient) GetUser(ctx context.Context, req *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// GetAdmin calls account.v1.AccountService.GetAdmin.
func (c *accountServiceClient) GetAdmin(ctx context.Context, req *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error) {
	return c.getAdmin.CallUnary(ctx, req)
}

// GetUserPublic calls account.v1.AccountService.GetUserPublic.
func (c *accountServiceClient) GetUserPublic(ctx context.Context, req *connect.Request[v1.GetUserPublicRequest]) (*connect.Response[v1.GetUserPublicResponse], error) {
	return c.getUserPublic.CallUnary(ctx, req)
}

// UpdateAccount calls account.v1.AccountService.UpdateAccount.
func (c *accountServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// UpdateUser calls account.v1.AccountService.UpdateUser.
func (c *accountServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// LoginUser calls account.v1.AccountService.LoginUser.
func (c *accountServiceClient) LoginUser(ctx context.Context, req *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error) {
	return c.loginUser.CallUnary(ctx, req)
}

// LoginAdmin calls account.v1.AccountService.LoginAdmin.
func (c *accountServiceClient) LoginAdmin(ctx context.Context, req *connect.Request[v1.LoginAdminRequest]) (*connect.Response[v1.LoginAdminResponse], error) {
	return c.loginAdmin.CallUnary(ctx, req)
}

// RegisterUser calls account.v1.AccountService.RegisterUser.
func (c *accountServiceClient) RegisterUser(ctx context.Context, req *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return c.registerUser.CallUnary(ctx, req)
}

// RegisterAdmin calls account.v1.AccountService.RegisterAdmin.
func (c *accountServiceClient) RegisterAdmin(ctx context.Context, req *connect.Request[v1.RegisterAdminRequest]) (*connect.Response[v1.RegisterAdminResponse], error) {
	return c.registerAdmin.CallUnary(ctx, req)
}

// GetCart calls account.v1.AccountService.GetCart.
func (c *accountServiceClient) GetCart(ctx context.Context, req *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.GetCartResponse], error) {
	return c.getCart.CallUnary(ctx, req)
}

// AddCartItem calls account.v1.AccountService.AddCartItem.
func (c *accountServiceClient) AddCartItem(ctx context.Context, req *connect.Request[v1.AddCartItemRequest]) (*connect.Response[v1.AddCartItemResponse], error) {
	return c.addCartItem.CallUnary(ctx, req)
}

// UpdateCartItem calls account.v1.AccountService.UpdateCartItem.
func (c *accountServiceClient) UpdateCartItem(ctx context.Context, req *connect.Request[v1.UpdateCartItemRequest]) (*connect.Response[v1.UpdateCartItemResponse], error) {
	return c.updateCartItem.CallUnary(ctx, req)
}

// ClearCart calls account.v1.AccountService.ClearCart.
func (c *accountServiceClient) ClearCart(ctx context.Context, req *connect.Request[v1.ClearCartRequest]) (*connect.Response[v1.ClearCartResponse], error) {
	return c.clearCart.CallUnary(ctx, req)
}

// GetAddress calls account.v1.AccountService.GetAddress.
func (c *accountServiceClient) GetAddress(ctx context.Context, req *connect.Request[v1.GetAddressRequest]) (*connect.Response[v1.GetAddressResponse], error) {
	return c.getAddress.CallUnary(ctx, req)
}

// ListAddresses calls account.v1.AccountService.ListAddresses.
func (c *accountServiceClient) ListAddresses(ctx context.Context, req *connect.Request[v1.ListAddressesRequest]) (*connect.Response[v1.ListAddressesResponse], error) {
	return c.listAddresses.CallUnary(ctx, req)
}

// CreateAddress calls account.v1.AccountService.CreateAddress.
func (c *accountServiceClient) CreateAddress(ctx context.Context, req *connect.Request[v1.CreateAddressRequest]) (*connect.Response[v1.CreateAddressResponse], error) {
	return c.createAddress.CallUnary(ctx, req)
}

// UpdateAddress calls account.v1.AccountService.UpdateAddress.
func (c *accountServiceClient) UpdateAddress(ctx context.Context, req *connect.Request[v1.UpdateAddressRequest]) (*connect.Response[v1.UpdateAddressResponse], error) {
	return c.updateAddress.CallUnary(ctx, req)
}

// DeleteAddress calls account.v1.AccountService.DeleteAddress.
func (c *accountServiceClient) DeleteAddress(ctx context.Context, req *connect.Request[v1.DeleteAddressRequest]) (*connect.Response[v1.DeleteAddressResponse], error) {
	return c.deleteAddress.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the account.v1.AccountService service.
type AccountServiceHandler interface {
	GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error)
	GetAdmin(context.Context, *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error)
	GetUserPublic(context.Context, *connect.Request[v1.GetUserPublicRequest]) (*connect.Response[v1.GetUserPublicResponse], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error)
	// Login, register
	LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error)
	LoginAdmin(context.Context, *connect.Request[v1.LoginAdminRequest]) (*connect.Response[v1.LoginAdminResponse], error)
	RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error)
	RegisterAdmin(context.Context, *connect.Request[v1.RegisterAdminRequest]) (*connect.Response[v1.RegisterAdminResponse], error)
	// Cart
	GetCart(context.Context, *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.GetCartResponse], error)
	AddCartItem(context.Context, *connect.Request[v1.AddCartItemRequest]) (*connect.Response[v1.AddCartItemResponse], error)
	UpdateCartItem(context.Context, *connect.Request[v1.UpdateCartItemRequest]) (*connect.Response[v1.UpdateCartItemResponse], error)
	ClearCart(context.Context, *connect.Request[v1.ClearCartRequest]) (*connect.Response[v1.ClearCartResponse], error)
	// Address
	GetAddress(context.Context, *connect.Request[v1.GetAddressRequest]) (*connect.Response[v1.GetAddressResponse], error)
	ListAddresses(context.Context, *connect.Request[v1.ListAddressesRequest]) (*connect.Response[v1.ListAddressesResponse], error)
	CreateAddress(context.Context, *connect.Request[v1.CreateAddressRequest]) (*connect.Response[v1.CreateAddressResponse], error)
	UpdateAddress(context.Context, *connect.Request[v1.UpdateAddressRequest]) (*connect.Response[v1.UpdateAddressResponse], error)
	DeleteAddress(context.Context, *connect.Request[v1.DeleteAddressRequest]) (*connect.Response[v1.DeleteAddressResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := v1.File_account_v1_service_proto.Services().ByName("AccountService").Methods()
	accountServiceGetUserHandler := connect.NewUnaryHandler(
		AccountServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(accountServiceMethods.ByName("GetUser")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAdminHandler := connect.NewUnaryHandler(
		AccountServiceGetAdminProcedure,
		svc.GetAdmin,
		connect.WithSchema(accountServiceMethods.ByName("GetAdmin")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetUserPublicHandler := connect.NewUnaryHandler(
		AccountServiceGetUserPublicProcedure,
		svc.GetUserPublic,
		connect.WithSchema(accountServiceMethods.ByName("GetUserPublic")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateAccountHandler := connect.NewUnaryHandler(
		AccountServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(accountServiceMethods.ByName("UpdateAccount")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateUserHandler := connect.NewUnaryHandler(
		AccountServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(accountServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceLoginUserHandler := connect.NewUnaryHandler(
		AccountServiceLoginUserProcedure,
		svc.LoginUser,
		connect.WithSchema(accountServiceMethods.ByName("LoginUser")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceLoginAdminHandler := connect.NewUnaryHandler(
		AccountServiceLoginAdminProcedure,
		svc.LoginAdmin,
		connect.WithSchema(accountServiceMethods.ByName("LoginAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceRegisterUserHandler := connect.NewUnaryHandler(
		AccountServiceRegisterUserProcedure,
		svc.RegisterUser,
		connect.WithSchema(accountServiceMethods.ByName("RegisterUser")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceRegisterAdminHandler := connect.NewUnaryHandler(
		AccountServiceRegisterAdminProcedure,
		svc.RegisterAdmin,
		connect.WithSchema(accountServiceMethods.ByName("RegisterAdmin")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetCartHandler := connect.NewUnaryHandler(
		AccountServiceGetCartProcedure,
		svc.GetCart,
		connect.WithSchema(accountServiceMethods.ByName("GetCart")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceAddCartItemHandler := connect.NewUnaryHandler(
		AccountServiceAddCartItemProcedure,
		svc.AddCartItem,
		connect.WithSchema(accountServiceMethods.ByName("AddCartItem")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateCartItemHandler := connect.NewUnaryHandler(
		AccountServiceUpdateCartItemProcedure,
		svc.UpdateCartItem,
		connect.WithSchema(accountServiceMethods.ByName("UpdateCartItem")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceClearCartHandler := connect.NewUnaryHandler(
		AccountServiceClearCartProcedure,
		svc.ClearCart,
		connect.WithSchema(accountServiceMethods.ByName("ClearCart")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceGetAddressHandler := connect.NewUnaryHandler(
		AccountServiceGetAddressProcedure,
		svc.GetAddress,
		connect.WithSchema(accountServiceMethods.ByName("GetAddress")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceListAddressesHandler := connect.NewUnaryHandler(
		AccountServiceListAddressesProcedure,
		svc.ListAddresses,
		connect.WithSchema(accountServiceMethods.ByName("ListAddresses")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceCreateAddressHandler := connect.NewUnaryHandler(
		AccountServiceCreateAddressProcedure,
		svc.CreateAddress,
		connect.WithSchema(accountServiceMethods.ByName("CreateAddress")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceUpdateAddressHandler := connect.NewUnaryHandler(
		AccountServiceUpdateAddressProcedure,
		svc.UpdateAddress,
		connect.WithSchema(accountServiceMethods.ByName("UpdateAddress")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceDeleteAddressHandler := connect.NewUnaryHandler(
		AccountServiceDeleteAddressProcedure,
		svc.DeleteAddress,
		connect.WithSchema(accountServiceMethods.ByName("DeleteAddress")),
		connect.WithHandlerOptions(opts...),
	)
	return "/account.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceGetUserProcedure:
			accountServiceGetUserHandler.ServeHTTP(w, r)
		case AccountServiceGetAdminProcedure:
			accountServiceGetAdminHandler.ServeHTTP(w, r)
		case AccountServiceGetUserPublicProcedure:
			accountServiceGetUserPublicHandler.ServeHTTP(w, r)
		case AccountServiceUpdateAccountProcedure:
			accountServiceUpdateAccountHandler.ServeHTTP(w, r)
		case AccountServiceUpdateUserProcedure:
			accountServiceUpdateUserHandler.ServeHTTP(w, r)
		case AccountServiceLoginUserProcedure:
			accountServiceLoginUserHandler.ServeHTTP(w, r)
		case AccountServiceLoginAdminProcedure:
			accountServiceLoginAdminHandler.ServeHTTP(w, r)
		case AccountServiceRegisterUserProcedure:
			accountServiceRegisterUserHandler.ServeHTTP(w, r)
		case AccountServiceRegisterAdminProcedure:
			accountServiceRegisterAdminHandler.ServeHTTP(w, r)
		case AccountServiceGetCartProcedure:
			accountServiceGetCartHandler.ServeHTTP(w, r)
		case AccountServiceAddCartItemProcedure:
			accountServiceAddCartItemHandler.ServeHTTP(w, r)
		case AccountServiceUpdateCartItemProcedure:
			accountServiceUpdateCartItemHandler.ServeHTTP(w, r)
		case AccountServiceClearCartProcedure:
			accountServiceClearCartHandler.ServeHTTP(w, r)
		case AccountServiceGetAddressProcedure:
			accountServiceGetAddressHandler.ServeHTTP(w, r)
		case AccountServiceListAddressesProcedure:
			accountServiceListAddressesHandler.ServeHTTP(w, r)
		case AccountServiceCreateAddressProcedure:
			accountServiceCreateAddressHandler.ServeHTTP(w, r)
		case AccountServiceUpdateAddressProcedure:
			accountServiceUpdateAddressHandler.ServeHTTP(w, r)
		case AccountServiceDeleteAddressProcedure:
			accountServiceDeleteAddressHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) GetUser(context.Context, *connect.Request[v1.GetUserRequest]) (*connect.Response[v1.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetUser is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAdmin(context.Context, *connect.Request[v1.GetAdminRequest]) (*connect.Response[v1.GetAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetAdmin is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetUserPublic(context.Context, *connect.Request[v1.GetUserPublicRequest]) (*connect.Response[v1.GetUserPublicResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetUserPublic is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.UpdateAccount is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserRequest]) (*connect.Response[v1.UpdateUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.UpdateUser is not implemented"))
}

func (UnimplementedAccountServiceHandler) LoginUser(context.Context, *connect.Request[v1.LoginUserRequest]) (*connect.Response[v1.LoginUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.LoginUser is not implemented"))
}

func (UnimplementedAccountServiceHandler) LoginAdmin(context.Context, *connect.Request[v1.LoginAdminRequest]) (*connect.Response[v1.LoginAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.LoginAdmin is not implemented"))
}

func (UnimplementedAccountServiceHandler) RegisterUser(context.Context, *connect.Request[v1.RegisterUserRequest]) (*connect.Response[v1.RegisterUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.RegisterUser is not implemented"))
}

func (UnimplementedAccountServiceHandler) RegisterAdmin(context.Context, *connect.Request[v1.RegisterAdminRequest]) (*connect.Response[v1.RegisterAdminResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.RegisterAdmin is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetCart(context.Context, *connect.Request[v1.GetCartRequest]) (*connect.Response[v1.GetCartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetCart is not implemented"))
}

func (UnimplementedAccountServiceHandler) AddCartItem(context.Context, *connect.Request[v1.AddCartItemRequest]) (*connect.Response[v1.AddCartItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.AddCartItem is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateCartItem(context.Context, *connect.Request[v1.UpdateCartItemRequest]) (*connect.Response[v1.UpdateCartItemResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.UpdateCartItem is not implemented"))
}

func (UnimplementedAccountServiceHandler) ClearCart(context.Context, *connect.Request[v1.ClearCartRequest]) (*connect.Response[v1.ClearCartResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.ClearCart is not implemented"))
}

func (UnimplementedAccountServiceHandler) GetAddress(context.Context, *connect.Request[v1.GetAddressRequest]) (*connect.Response[v1.GetAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.GetAddress is not implemented"))
}

func (UnimplementedAccountServiceHandler) ListAddresses(context.Context, *connect.Request[v1.ListAddressesRequest]) (*connect.Response[v1.ListAddressesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.ListAddresses is not implemented"))
}

func (UnimplementedAccountServiceHandler) CreateAddress(context.Context, *connect.Request[v1.CreateAddressRequest]) (*connect.Response[v1.CreateAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.CreateAddress is not implemented"))
}

func (UnimplementedAccountServiceHandler) UpdateAddress(context.Context, *connect.Request[v1.UpdateAddressRequest]) (*connect.Response[v1.UpdateAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.UpdateAddress is not implemented"))
}

func (UnimplementedAccountServiceHandler) DeleteAddress(context.Context, *connect.Request[v1.DeleteAddressRequest]) (*connect.Response[v1.DeleteAddressResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("account.v1.AccountService.DeleteAddress is not implemented"))
}
