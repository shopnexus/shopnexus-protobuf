// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: product/v1/service.proto

package productv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shopnexus/shopnexus-protobuf-gen-go/pb/product/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "product.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceGetProductModelProcedure is the fully-qualified name of the ProductService's
	// GetProductModel RPC.
	ProductServiceGetProductModelProcedure = "/product.v1.ProductService/GetProductModel"
	// ProductServiceListProductModelsProcedure is the fully-qualified name of the ProductService's
	// ListProductModels RPC.
	ProductServiceListProductModelsProcedure = "/product.v1.ProductService/ListProductModels"
	// ProductServiceCreateProductModelProcedure is the fully-qualified name of the ProductService's
	// CreateProductModel RPC.
	ProductServiceCreateProductModelProcedure = "/product.v1.ProductService/CreateProductModel"
	// ProductServiceUpdateProductModelProcedure is the fully-qualified name of the ProductService's
	// UpdateProductModel RPC.
	ProductServiceUpdateProductModelProcedure = "/product.v1.ProductService/UpdateProductModel"
	// ProductServiceDeleteProductModelProcedure is the fully-qualified name of the ProductService's
	// DeleteProductModel RPC.
	ProductServiceDeleteProductModelProcedure = "/product.v1.ProductService/DeleteProductModel"
	// ProductServiceGetProductProcedure is the fully-qualified name of the ProductService's GetProduct
	// RPC.
	ProductServiceGetProductProcedure = "/product.v1.ProductService/GetProduct"
	// ProductServiceListProductsProcedure is the fully-qualified name of the ProductService's
	// ListProducts RPC.
	ProductServiceListProductsProcedure = "/product.v1.ProductService/ListProducts"
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/product.v1.ProductService/CreateProduct"
	// ProductServiceUpdateProductProcedure is the fully-qualified name of the ProductService's
	// UpdateProduct RPC.
	ProductServiceUpdateProductProcedure = "/product.v1.ProductService/UpdateProduct"
	// ProductServiceDeleteProductProcedure is the fully-qualified name of the ProductService's
	// DeleteProduct RPC.
	ProductServiceDeleteProductProcedure = "/product.v1.ProductService/DeleteProduct"
)

// ProductServiceClient is a client for the product.v1.ProductService service.
type ProductServiceClient interface {
	GetProductModel(context.Context, *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error)
	ListProductModels(context.Context, *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error)
	CreateProductModel(context.Context, *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error)
	UpdateProductModel(context.Context, *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error)
	DeleteProductModel(context.Context, *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error)
	GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error)
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
}

// NewProductServiceClient constructs a client for the product.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productServiceMethods := v1.File_product_v1_service_proto.Services().ByName("ProductService").Methods()
	return &productServiceClient{
		getProductModel: connect.NewClient[v1.GetProductModelRequest, v1.GetProductModelResponse](
			httpClient,
			baseURL+ProductServiceGetProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProductModel")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listProductModels: connect.NewClient[v1.ListProductModelsRequest, v1.ListProductModelsResponse](
			httpClient,
			baseURL+ProductServiceListProductModelsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListProductModels")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createProductModel: connect.NewClient[v1.CreateProductModelRequest, v1.CreateProductModelResponse](
			httpClient,
			baseURL+ProductServiceCreateProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateProductModel")),
			connect.WithClientOptions(opts...),
		),
		updateProductModel: connect.NewClient[v1.UpdateProductModelRequest, v1.UpdateProductModelResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateProductModel")),
			connect.WithClientOptions(opts...),
		),
		deleteProductModel: connect.NewClient[v1.DeleteProductModelRequest, v1.DeleteProductModelResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteProductModel")),
			connect.WithClientOptions(opts...),
		),
		getProduct: connect.NewClient[v1.GetProductRequest, v1.GetProductResponse](
			httpClient,
			baseURL+ProductServiceGetProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProduct")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listProducts: connect.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+ProductServiceListProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListProducts")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateProduct")),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[v1.DeleteProductRequest, v1.DeleteProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	getProductModel    *connect.Client[v1.GetProductModelRequest, v1.GetProductModelResponse]
	listProductModels  *connect.Client[v1.ListProductModelsRequest, v1.ListProductModelsResponse]
	createProductModel *connect.Client[v1.CreateProductModelRequest, v1.CreateProductModelResponse]
	updateProductModel *connect.Client[v1.UpdateProductModelRequest, v1.UpdateProductModelResponse]
	deleteProductModel *connect.Client[v1.DeleteProductModelRequest, v1.DeleteProductModelResponse]
	getProduct         *connect.Client[v1.GetProductRequest, v1.GetProductResponse]
	listProducts       *connect.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	createProduct      *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	updateProduct      *connect.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	deleteProduct      *connect.Client[v1.DeleteProductRequest, v1.DeleteProductResponse]
}

// GetProductModel calls product.v1.ProductService.GetProductModel.
func (c *productServiceClient) GetProductModel(ctx context.Context, req *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error) {
	return c.getProductModel.CallUnary(ctx, req)
}

// ListProductModels calls product.v1.ProductService.ListProductModels.
func (c *productServiceClient) ListProductModels(ctx context.Context, req *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error) {
	return c.listProductModels.CallUnary(ctx, req)
}

// CreateProductModel calls product.v1.ProductService.CreateProductModel.
func (c *productServiceClient) CreateProductModel(ctx context.Context, req *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error) {
	return c.createProductModel.CallUnary(ctx, req)
}

// UpdateProductModel calls product.v1.ProductService.UpdateProductModel.
func (c *productServiceClient) UpdateProductModel(ctx context.Context, req *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error) {
	return c.updateProductModel.CallUnary(ctx, req)
}

// DeleteProductModel calls product.v1.ProductService.DeleteProductModel.
func (c *productServiceClient) DeleteProductModel(ctx context.Context, req *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error) {
	return c.deleteProductModel.CallUnary(ctx, req)
}

// GetProduct calls product.v1.ProductService.GetProduct.
func (c *productServiceClient) GetProduct(ctx context.Context, req *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// ListProducts calls product.v1.ProductService.ListProducts.
func (c *productServiceClient) ListProducts(ctx context.Context, req *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// CreateProduct calls product.v1.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// UpdateProduct calls product.v1.ProductService.UpdateProduct.
func (c *productServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls product.v1.ProductService.DeleteProduct.
func (c *productServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the product.v1.ProductService service.
type ProductServiceHandler interface {
	GetProductModel(context.Context, *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error)
	ListProductModels(context.Context, *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error)
	CreateProductModel(context.Context, *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error)
	UpdateProductModel(context.Context, *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error)
	DeleteProductModel(context.Context, *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error)
	GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error)
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceMethods := v1.File_product_v1_service_proto.Services().ByName("ProductService").Methods()
	productServiceGetProductModelHandler := connect.NewUnaryHandler(
		ProductServiceGetProductModelProcedure,
		svc.GetProductModel,
		connect.WithSchema(productServiceMethods.ByName("GetProductModel")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductModelsHandler := connect.NewUnaryHandler(
		ProductServiceListProductModelsProcedure,
		svc.ListProductModels,
		connect.WithSchema(productServiceMethods.ByName("ListProductModels")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductModelHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductModelProcedure,
		svc.CreateProductModel,
		connect.WithSchema(productServiceMethods.ByName("CreateProductModel")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductModelHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductModelProcedure,
		svc.UpdateProductModel,
		connect.WithSchema(productServiceMethods.ByName("UpdateProductModel")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductModelHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductModelProcedure,
		svc.DeleteProductModel,
		connect.WithSchema(productServiceMethods.ByName("DeleteProductModel")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductHandler := connect.NewUnaryHandler(
		ProductServiceGetProductProcedure,
		svc.GetProduct,
		connect.WithSchema(productServiceMethods.ByName("GetProduct")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductsHandler := connect.NewUnaryHandler(
		ProductServiceListProductsProcedure,
		svc.ListProducts,
		connect.WithSchema(productServiceMethods.ByName("ListProducts")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(productServiceMethods.ByName("CreateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
		connect.WithHandlerOptions(opts...),
	)
	return "/product.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceGetProductModelProcedure:
			productServiceGetProductModelHandler.ServeHTTP(w, r)
		case ProductServiceListProductModelsProcedure:
			productServiceListProductModelsHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductModelProcedure:
			productServiceCreateProductModelHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductModelProcedure:
			productServiceUpdateProductModelHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductModelProcedure:
			productServiceDeleteProductModelHandler.ServeHTTP(w, r)
		case ProductServiceGetProductProcedure:
			productServiceGetProductHandler.ServeHTTP(w, r)
		case ProductServiceListProductsProcedure:
			productServiceListProductsHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductProcedure:
			productServiceCreateProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductProcedure:
			productServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductProcedure:
			productServiceDeleteProductHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) GetProductModel(context.Context, *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProductModels(context.Context, *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProductModels is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProductModel(context.Context, *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductModel(context.Context, *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProductModel(context.Context, *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProduct is not implemented"))
}
