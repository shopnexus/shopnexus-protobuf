// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: product/v1/service.proto

package productv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/shopnexus/shopnexus-protobuf-gen-go/pb/product/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "product.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceGetProductModelProcedure is the fully-qualified name of the ProductService's
	// GetProductModel RPC.
	ProductServiceGetProductModelProcedure = "/product.v1.ProductService/GetProductModel"
	// ProductServiceListProductModelsProcedure is the fully-qualified name of the ProductService's
	// ListProductModels RPC.
	ProductServiceListProductModelsProcedure = "/product.v1.ProductService/ListProductModels"
	// ProductServiceCreateProductModelProcedure is the fully-qualified name of the ProductService's
	// CreateProductModel RPC.
	ProductServiceCreateProductModelProcedure = "/product.v1.ProductService/CreateProductModel"
	// ProductServiceUpdateProductModelProcedure is the fully-qualified name of the ProductService's
	// UpdateProductModel RPC.
	ProductServiceUpdateProductModelProcedure = "/product.v1.ProductService/UpdateProductModel"
	// ProductServiceDeleteProductModelProcedure is the fully-qualified name of the ProductService's
	// DeleteProductModel RPC.
	ProductServiceDeleteProductModelProcedure = "/product.v1.ProductService/DeleteProductModel"
	// ProductServiceListProductTypesProcedure is the fully-qualified name of the ProductService's
	// ListProductTypes RPC.
	ProductServiceListProductTypesProcedure = "/product.v1.ProductService/ListProductTypes"
	// ProductServiceGetProductProcedure is the fully-qualified name of the ProductService's GetProduct
	// RPC.
	ProductServiceGetProductProcedure = "/product.v1.ProductService/GetProduct"
	// ProductServiceListProductsProcedure is the fully-qualified name of the ProductService's
	// ListProducts RPC.
	ProductServiceListProductsProcedure = "/product.v1.ProductService/ListProducts"
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/product.v1.ProductService/CreateProduct"
	// ProductServiceUpdateProductProcedure is the fully-qualified name of the ProductService's
	// UpdateProduct RPC.
	ProductServiceUpdateProductProcedure = "/product.v1.ProductService/UpdateProduct"
	// ProductServiceDeleteProductProcedure is the fully-qualified name of the ProductService's
	// DeleteProduct RPC.
	ProductServiceDeleteProductProcedure = "/product.v1.ProductService/DeleteProduct"
	// ProductServiceGetBrandProcedure is the fully-qualified name of the ProductService's GetBrand RPC.
	ProductServiceGetBrandProcedure = "/product.v1.ProductService/GetBrand"
	// ProductServiceListBrandsProcedure is the fully-qualified name of the ProductService's ListBrands
	// RPC.
	ProductServiceListBrandsProcedure = "/product.v1.ProductService/ListBrands"
	// ProductServiceCreateBrandProcedure is the fully-qualified name of the ProductService's
	// CreateBrand RPC.
	ProductServiceCreateBrandProcedure = "/product.v1.ProductService/CreateBrand"
	// ProductServiceUpdateBrandProcedure is the fully-qualified name of the ProductService's
	// UpdateBrand RPC.
	ProductServiceUpdateBrandProcedure = "/product.v1.ProductService/UpdateBrand"
	// ProductServiceDeleteBrandProcedure is the fully-qualified name of the ProductService's
	// DeleteBrand RPC.
	ProductServiceDeleteBrandProcedure = "/product.v1.ProductService/DeleteBrand"
	// ProductServiceGetSaleProcedure is the fully-qualified name of the ProductService's GetSale RPC.
	ProductServiceGetSaleProcedure = "/product.v1.ProductService/GetSale"
	// ProductServiceListSalesProcedure is the fully-qualified name of the ProductService's ListSales
	// RPC.
	ProductServiceListSalesProcedure = "/product.v1.ProductService/ListSales"
	// ProductServiceCreateSaleProcedure is the fully-qualified name of the ProductService's CreateSale
	// RPC.
	ProductServiceCreateSaleProcedure = "/product.v1.ProductService/CreateSale"
	// ProductServiceUpdateSaleProcedure is the fully-qualified name of the ProductService's UpdateSale
	// RPC.
	ProductServiceUpdateSaleProcedure = "/product.v1.ProductService/UpdateSale"
	// ProductServiceDeleteSaleProcedure is the fully-qualified name of the ProductService's DeleteSale
	// RPC.
	ProductServiceDeleteSaleProcedure = "/product.v1.ProductService/DeleteSale"
	// ProductServiceGetTagProcedure is the fully-qualified name of the ProductService's GetTag RPC.
	ProductServiceGetTagProcedure = "/product.v1.ProductService/GetTag"
	// ProductServiceListTagsProcedure is the fully-qualified name of the ProductService's ListTags RPC.
	ProductServiceListTagsProcedure = "/product.v1.ProductService/ListTags"
	// ProductServiceCreateTagProcedure is the fully-qualified name of the ProductService's CreateTag
	// RPC.
	ProductServiceCreateTagProcedure = "/product.v1.ProductService/CreateTag"
	// ProductServiceUpdateTagProcedure is the fully-qualified name of the ProductService's UpdateTag
	// RPC.
	ProductServiceUpdateTagProcedure = "/product.v1.ProductService/UpdateTag"
	// ProductServiceDeleteTagProcedure is the fully-qualified name of the ProductService's DeleteTag
	// RPC.
	ProductServiceDeleteTagProcedure = "/product.v1.ProductService/DeleteTag"
)

// ProductServiceClient is a client for the product.v1.ProductService service.
type ProductServiceClient interface {
	// PRODUCT MODEL
	GetProductModel(context.Context, *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error)
	ListProductModels(context.Context, *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error)
	CreateProductModel(context.Context, *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error)
	UpdateProductModel(context.Context, *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error)
	DeleteProductModel(context.Context, *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error)
	// PRODUCT TYPES
	ListProductTypes(context.Context, *connect.Request[v1.ListProductTypesRequest]) (*connect.Response[v1.ListProductTypesResponse], error)
	// PRODUCT
	GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error)
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
	// BRAND
	GetBrand(context.Context, *connect.Request[v1.GetBrandRequest]) (*connect.Response[v1.GetBrandResponse], error)
	ListBrands(context.Context, *connect.Request[v1.ListBrandsRequest]) (*connect.Response[v1.ListBrandsResponse], error)
	CreateBrand(context.Context, *connect.Request[v1.CreateBrandRequest]) (*connect.Response[v1.CreateBrandResponse], error)
	UpdateBrand(context.Context, *connect.Request[v1.UpdateBrandRequest]) (*connect.Response[v1.UpdateBrandResponse], error)
	DeleteBrand(context.Context, *connect.Request[v1.DeleteBrandRequest]) (*connect.Response[v1.DeleteBrandResponse], error)
	// SALE
	GetSale(context.Context, *connect.Request[v1.GetSaleRequest]) (*connect.Response[v1.GetSaleResponse], error)
	ListSales(context.Context, *connect.Request[v1.ListSalesRequest]) (*connect.Response[v1.ListSalesResponse], error)
	CreateSale(context.Context, *connect.Request[v1.CreateSaleRequest]) (*connect.Response[v1.CreateSaleResponse], error)
	UpdateSale(context.Context, *connect.Request[v1.UpdateSaleRequest]) (*connect.Response[v1.UpdateSaleResponse], error)
	DeleteSale(context.Context, *connect.Request[v1.DeleteSaleRequest]) (*connect.Response[v1.DeleteSaleResponse], error)
	// TAG
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error)
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error)
	UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
}

// NewProductServiceClient constructs a client for the product.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productServiceMethods := v1.File_product_v1_service_proto.Services().ByName("ProductService").Methods()
	return &productServiceClient{
		getProductModel: connect.NewClient[v1.GetProductModelRequest, v1.GetProductModelResponse](
			httpClient,
			baseURL+ProductServiceGetProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProductModel")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listProductModels: connect.NewClient[v1.ListProductModelsRequest, v1.ListProductModelsResponse](
			httpClient,
			baseURL+ProductServiceListProductModelsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListProductModels")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createProductModel: connect.NewClient[v1.CreateProductModelRequest, v1.CreateProductModelResponse](
			httpClient,
			baseURL+ProductServiceCreateProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateProductModel")),
			connect.WithClientOptions(opts...),
		),
		updateProductModel: connect.NewClient[v1.UpdateProductModelRequest, v1.UpdateProductModelResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateProductModel")),
			connect.WithClientOptions(opts...),
		),
		deleteProductModel: connect.NewClient[v1.DeleteProductModelRequest, v1.DeleteProductModelResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductModelProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteProductModel")),
			connect.WithClientOptions(opts...),
		),
		listProductTypes: connect.NewClient[v1.ListProductTypesRequest, v1.ListProductTypesResponse](
			httpClient,
			baseURL+ProductServiceListProductTypesProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListProductTypes")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getProduct: connect.NewClient[v1.GetProductRequest, v1.GetProductResponse](
			httpClient,
			baseURL+ProductServiceGetProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetProduct")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listProducts: connect.NewClient[v1.ListProductsRequest, v1.ListProductsResponse](
			httpClient,
			baseURL+ProductServiceListProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListProducts")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateProduct")),
			connect.WithClientOptions(opts...),
		),
		updateProduct: connect.NewClient[v1.UpdateProductRequest, v1.UpdateProductResponse](
			httpClient,
			baseURL+ProductServiceUpdateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
			connect.WithClientOptions(opts...),
		),
		deleteProduct: connect.NewClient[v1.DeleteProductRequest, v1.DeleteProductResponse](
			httpClient,
			baseURL+ProductServiceDeleteProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
			connect.WithClientOptions(opts...),
		),
		getBrand: connect.NewClient[v1.GetBrandRequest, v1.GetBrandResponse](
			httpClient,
			baseURL+ProductServiceGetBrandProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetBrand")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listBrands: connect.NewClient[v1.ListBrandsRequest, v1.ListBrandsResponse](
			httpClient,
			baseURL+ProductServiceListBrandsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListBrands")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createBrand: connect.NewClient[v1.CreateBrandRequest, v1.CreateBrandResponse](
			httpClient,
			baseURL+ProductServiceCreateBrandProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateBrand")),
			connect.WithClientOptions(opts...),
		),
		updateBrand: connect.NewClient[v1.UpdateBrandRequest, v1.UpdateBrandResponse](
			httpClient,
			baseURL+ProductServiceUpdateBrandProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateBrand")),
			connect.WithClientOptions(opts...),
		),
		deleteBrand: connect.NewClient[v1.DeleteBrandRequest, v1.DeleteBrandResponse](
			httpClient,
			baseURL+ProductServiceDeleteBrandProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteBrand")),
			connect.WithClientOptions(opts...),
		),
		getSale: connect.NewClient[v1.GetSaleRequest, v1.GetSaleResponse](
			httpClient,
			baseURL+ProductServiceGetSaleProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetSale")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSales: connect.NewClient[v1.ListSalesRequest, v1.ListSalesResponse](
			httpClient,
			baseURL+ProductServiceListSalesProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListSales")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createSale: connect.NewClient[v1.CreateSaleRequest, v1.CreateSaleResponse](
			httpClient,
			baseURL+ProductServiceCreateSaleProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateSale")),
			connect.WithClientOptions(opts...),
		),
		updateSale: connect.NewClient[v1.UpdateSaleRequest, v1.UpdateSaleResponse](
			httpClient,
			baseURL+ProductServiceUpdateSaleProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateSale")),
			connect.WithClientOptions(opts...),
		),
		deleteSale: connect.NewClient[v1.DeleteSaleRequest, v1.DeleteSaleResponse](
			httpClient,
			baseURL+ProductServiceDeleteSaleProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteSale")),
			connect.WithClientOptions(opts...),
		),
		getTag: connect.NewClient[v1.GetTagRequest, v1.GetTagResponse](
			httpClient,
			baseURL+ProductServiceGetTagProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetTag")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listTags: connect.NewClient[v1.ListTagsRequest, v1.ListTagsResponse](
			httpClient,
			baseURL+ProductServiceListTagsProcedure,
			connect.WithSchema(productServiceMethods.ByName("ListTags")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		createTag: connect.NewClient[v1.CreateTagRequest, v1.CreateTagResponse](
			httpClient,
			baseURL+ProductServiceCreateTagProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateTag")),
			connect.WithClientOptions(opts...),
		),
		updateTag: connect.NewClient[v1.UpdateTagRequest, v1.UpdateTagResponse](
			httpClient,
			baseURL+ProductServiceUpdateTagProcedure,
			connect.WithSchema(productServiceMethods.ByName("UpdateTag")),
			connect.WithClientOptions(opts...),
		),
		deleteTag: connect.NewClient[v1.DeleteTagRequest, v1.DeleteTagResponse](
			httpClient,
			baseURL+ProductServiceDeleteTagProcedure,
			connect.WithSchema(productServiceMethods.ByName("DeleteTag")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	getProductModel    *connect.Client[v1.GetProductModelRequest, v1.GetProductModelResponse]
	listProductModels  *connect.Client[v1.ListProductModelsRequest, v1.ListProductModelsResponse]
	createProductModel *connect.Client[v1.CreateProductModelRequest, v1.CreateProductModelResponse]
	updateProductModel *connect.Client[v1.UpdateProductModelRequest, v1.UpdateProductModelResponse]
	deleteProductModel *connect.Client[v1.DeleteProductModelRequest, v1.DeleteProductModelResponse]
	listProductTypes   *connect.Client[v1.ListProductTypesRequest, v1.ListProductTypesResponse]
	getProduct         *connect.Client[v1.GetProductRequest, v1.GetProductResponse]
	listProducts       *connect.Client[v1.ListProductsRequest, v1.ListProductsResponse]
	createProduct      *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
	updateProduct      *connect.Client[v1.UpdateProductRequest, v1.UpdateProductResponse]
	deleteProduct      *connect.Client[v1.DeleteProductRequest, v1.DeleteProductResponse]
	getBrand           *connect.Client[v1.GetBrandRequest, v1.GetBrandResponse]
	listBrands         *connect.Client[v1.ListBrandsRequest, v1.ListBrandsResponse]
	createBrand        *connect.Client[v1.CreateBrandRequest, v1.CreateBrandResponse]
	updateBrand        *connect.Client[v1.UpdateBrandRequest, v1.UpdateBrandResponse]
	deleteBrand        *connect.Client[v1.DeleteBrandRequest, v1.DeleteBrandResponse]
	getSale            *connect.Client[v1.GetSaleRequest, v1.GetSaleResponse]
	listSales          *connect.Client[v1.ListSalesRequest, v1.ListSalesResponse]
	createSale         *connect.Client[v1.CreateSaleRequest, v1.CreateSaleResponse]
	updateSale         *connect.Client[v1.UpdateSaleRequest, v1.UpdateSaleResponse]
	deleteSale         *connect.Client[v1.DeleteSaleRequest, v1.DeleteSaleResponse]
	getTag             *connect.Client[v1.GetTagRequest, v1.GetTagResponse]
	listTags           *connect.Client[v1.ListTagsRequest, v1.ListTagsResponse]
	createTag          *connect.Client[v1.CreateTagRequest, v1.CreateTagResponse]
	updateTag          *connect.Client[v1.UpdateTagRequest, v1.UpdateTagResponse]
	deleteTag          *connect.Client[v1.DeleteTagRequest, v1.DeleteTagResponse]
}

// GetProductModel calls product.v1.ProductService.GetProductModel.
func (c *productServiceClient) GetProductModel(ctx context.Context, req *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error) {
	return c.getProductModel.CallUnary(ctx, req)
}

// ListProductModels calls product.v1.ProductService.ListProductModels.
func (c *productServiceClient) ListProductModels(ctx context.Context, req *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error) {
	return c.listProductModels.CallUnary(ctx, req)
}

// CreateProductModel calls product.v1.ProductService.CreateProductModel.
func (c *productServiceClient) CreateProductModel(ctx context.Context, req *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error) {
	return c.createProductModel.CallUnary(ctx, req)
}

// UpdateProductModel calls product.v1.ProductService.UpdateProductModel.
func (c *productServiceClient) UpdateProductModel(ctx context.Context, req *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error) {
	return c.updateProductModel.CallUnary(ctx, req)
}

// DeleteProductModel calls product.v1.ProductService.DeleteProductModel.
func (c *productServiceClient) DeleteProductModel(ctx context.Context, req *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error) {
	return c.deleteProductModel.CallUnary(ctx, req)
}

// ListProductTypes calls product.v1.ProductService.ListProductTypes.
func (c *productServiceClient) ListProductTypes(ctx context.Context, req *connect.Request[v1.ListProductTypesRequest]) (*connect.Response[v1.ListProductTypesResponse], error) {
	return c.listProductTypes.CallUnary(ctx, req)
}

// GetProduct calls product.v1.ProductService.GetProduct.
func (c *productServiceClient) GetProduct(ctx context.Context, req *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error) {
	return c.getProduct.CallUnary(ctx, req)
}

// ListProducts calls product.v1.ProductService.ListProducts.
func (c *productServiceClient) ListProducts(ctx context.Context, req *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return c.listProducts.CallUnary(ctx, req)
}

// CreateProduct calls product.v1.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// UpdateProduct calls product.v1.ProductService.UpdateProduct.
func (c *productServiceClient) UpdateProduct(ctx context.Context, req *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return c.updateProduct.CallUnary(ctx, req)
}

// DeleteProduct calls product.v1.ProductService.DeleteProduct.
func (c *productServiceClient) DeleteProduct(ctx context.Context, req *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return c.deleteProduct.CallUnary(ctx, req)
}

// GetBrand calls product.v1.ProductService.GetBrand.
func (c *productServiceClient) GetBrand(ctx context.Context, req *connect.Request[v1.GetBrandRequest]) (*connect.Response[v1.GetBrandResponse], error) {
	return c.getBrand.CallUnary(ctx, req)
}

// ListBrands calls product.v1.ProductService.ListBrands.
func (c *productServiceClient) ListBrands(ctx context.Context, req *connect.Request[v1.ListBrandsRequest]) (*connect.Response[v1.ListBrandsResponse], error) {
	return c.listBrands.CallUnary(ctx, req)
}

// CreateBrand calls product.v1.ProductService.CreateBrand.
func (c *productServiceClient) CreateBrand(ctx context.Context, req *connect.Request[v1.CreateBrandRequest]) (*connect.Response[v1.CreateBrandResponse], error) {
	return c.createBrand.CallUnary(ctx, req)
}

// UpdateBrand calls product.v1.ProductService.UpdateBrand.
func (c *productServiceClient) UpdateBrand(ctx context.Context, req *connect.Request[v1.UpdateBrandRequest]) (*connect.Response[v1.UpdateBrandResponse], error) {
	return c.updateBrand.CallUnary(ctx, req)
}

// DeleteBrand calls product.v1.ProductService.DeleteBrand.
func (c *productServiceClient) DeleteBrand(ctx context.Context, req *connect.Request[v1.DeleteBrandRequest]) (*connect.Response[v1.DeleteBrandResponse], error) {
	return c.deleteBrand.CallUnary(ctx, req)
}

// GetSale calls product.v1.ProductService.GetSale.
func (c *productServiceClient) GetSale(ctx context.Context, req *connect.Request[v1.GetSaleRequest]) (*connect.Response[v1.GetSaleResponse], error) {
	return c.getSale.CallUnary(ctx, req)
}

// ListSales calls product.v1.ProductService.ListSales.
func (c *productServiceClient) ListSales(ctx context.Context, req *connect.Request[v1.ListSalesRequest]) (*connect.Response[v1.ListSalesResponse], error) {
	return c.listSales.CallUnary(ctx, req)
}

// CreateSale calls product.v1.ProductService.CreateSale.
func (c *productServiceClient) CreateSale(ctx context.Context, req *connect.Request[v1.CreateSaleRequest]) (*connect.Response[v1.CreateSaleResponse], error) {
	return c.createSale.CallUnary(ctx, req)
}

// UpdateSale calls product.v1.ProductService.UpdateSale.
func (c *productServiceClient) UpdateSale(ctx context.Context, req *connect.Request[v1.UpdateSaleRequest]) (*connect.Response[v1.UpdateSaleResponse], error) {
	return c.updateSale.CallUnary(ctx, req)
}

// DeleteSale calls product.v1.ProductService.DeleteSale.
func (c *productServiceClient) DeleteSale(ctx context.Context, req *connect.Request[v1.DeleteSaleRequest]) (*connect.Response[v1.DeleteSaleResponse], error) {
	return c.deleteSale.CallUnary(ctx, req)
}

// GetTag calls product.v1.ProductService.GetTag.
func (c *productServiceClient) GetTag(ctx context.Context, req *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error) {
	return c.getTag.CallUnary(ctx, req)
}

// ListTags calls product.v1.ProductService.ListTags.
func (c *productServiceClient) ListTags(ctx context.Context, req *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return c.listTags.CallUnary(ctx, req)
}

// CreateTag calls product.v1.ProductService.CreateTag.
func (c *productServiceClient) CreateTag(ctx context.Context, req *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error) {
	return c.createTag.CallUnary(ctx, req)
}

// UpdateTag calls product.v1.ProductService.UpdateTag.
func (c *productServiceClient) UpdateTag(ctx context.Context, req *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error) {
	return c.updateTag.CallUnary(ctx, req)
}

// DeleteTag calls product.v1.ProductService.DeleteTag.
func (c *productServiceClient) DeleteTag(ctx context.Context, req *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return c.deleteTag.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the product.v1.ProductService service.
type ProductServiceHandler interface {
	// PRODUCT MODEL
	GetProductModel(context.Context, *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error)
	ListProductModels(context.Context, *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error)
	CreateProductModel(context.Context, *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error)
	UpdateProductModel(context.Context, *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error)
	DeleteProductModel(context.Context, *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error)
	// PRODUCT TYPES
	ListProductTypes(context.Context, *connect.Request[v1.ListProductTypesRequest]) (*connect.Response[v1.ListProductTypesResponse], error)
	// PRODUCT
	GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error)
	ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
	UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error)
	DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error)
	// BRAND
	GetBrand(context.Context, *connect.Request[v1.GetBrandRequest]) (*connect.Response[v1.GetBrandResponse], error)
	ListBrands(context.Context, *connect.Request[v1.ListBrandsRequest]) (*connect.Response[v1.ListBrandsResponse], error)
	CreateBrand(context.Context, *connect.Request[v1.CreateBrandRequest]) (*connect.Response[v1.CreateBrandResponse], error)
	UpdateBrand(context.Context, *connect.Request[v1.UpdateBrandRequest]) (*connect.Response[v1.UpdateBrandResponse], error)
	DeleteBrand(context.Context, *connect.Request[v1.DeleteBrandRequest]) (*connect.Response[v1.DeleteBrandResponse], error)
	// SALE
	GetSale(context.Context, *connect.Request[v1.GetSaleRequest]) (*connect.Response[v1.GetSaleResponse], error)
	ListSales(context.Context, *connect.Request[v1.ListSalesRequest]) (*connect.Response[v1.ListSalesResponse], error)
	CreateSale(context.Context, *connect.Request[v1.CreateSaleRequest]) (*connect.Response[v1.CreateSaleResponse], error)
	UpdateSale(context.Context, *connect.Request[v1.UpdateSaleRequest]) (*connect.Response[v1.UpdateSaleResponse], error)
	DeleteSale(context.Context, *connect.Request[v1.DeleteSaleRequest]) (*connect.Response[v1.DeleteSaleResponse], error)
	// TAG
	GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error)
	ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error)
	CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error)
	UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error)
	DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceMethods := v1.File_product_v1_service_proto.Services().ByName("ProductService").Methods()
	productServiceGetProductModelHandler := connect.NewUnaryHandler(
		ProductServiceGetProductModelProcedure,
		svc.GetProductModel,
		connect.WithSchema(productServiceMethods.ByName("GetProductModel")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductModelsHandler := connect.NewUnaryHandler(
		ProductServiceListProductModelsProcedure,
		svc.ListProductModels,
		connect.WithSchema(productServiceMethods.ByName("ListProductModels")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductModelHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductModelProcedure,
		svc.CreateProductModel,
		connect.WithSchema(productServiceMethods.ByName("CreateProductModel")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductModelHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductModelProcedure,
		svc.UpdateProductModel,
		connect.WithSchema(productServiceMethods.ByName("UpdateProductModel")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductModelHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductModelProcedure,
		svc.DeleteProductModel,
		connect.WithSchema(productServiceMethods.ByName("DeleteProductModel")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductTypesHandler := connect.NewUnaryHandler(
		ProductServiceListProductTypesProcedure,
		svc.ListProductTypes,
		connect.WithSchema(productServiceMethods.ByName("ListProductTypes")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetProductHandler := connect.NewUnaryHandler(
		ProductServiceGetProductProcedure,
		svc.GetProduct,
		connect.WithSchema(productServiceMethods.ByName("GetProduct")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListProductsHandler := connect.NewUnaryHandler(
		ProductServiceListProductsProcedure,
		svc.ListProducts,
		connect.WithSchema(productServiceMethods.ByName("ListProducts")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(productServiceMethods.ByName("CreateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateProductHandler := connect.NewUnaryHandler(
		ProductServiceUpdateProductProcedure,
		svc.UpdateProduct,
		connect.WithSchema(productServiceMethods.ByName("UpdateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteProductHandler := connect.NewUnaryHandler(
		ProductServiceDeleteProductProcedure,
		svc.DeleteProduct,
		connect.WithSchema(productServiceMethods.ByName("DeleteProduct")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetBrandHandler := connect.NewUnaryHandler(
		ProductServiceGetBrandProcedure,
		svc.GetBrand,
		connect.WithSchema(productServiceMethods.ByName("GetBrand")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListBrandsHandler := connect.NewUnaryHandler(
		ProductServiceListBrandsProcedure,
		svc.ListBrands,
		connect.WithSchema(productServiceMethods.ByName("ListBrands")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateBrandHandler := connect.NewUnaryHandler(
		ProductServiceCreateBrandProcedure,
		svc.CreateBrand,
		connect.WithSchema(productServiceMethods.ByName("CreateBrand")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateBrandHandler := connect.NewUnaryHandler(
		ProductServiceUpdateBrandProcedure,
		svc.UpdateBrand,
		connect.WithSchema(productServiceMethods.ByName("UpdateBrand")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteBrandHandler := connect.NewUnaryHandler(
		ProductServiceDeleteBrandProcedure,
		svc.DeleteBrand,
		connect.WithSchema(productServiceMethods.ByName("DeleteBrand")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetSaleHandler := connect.NewUnaryHandler(
		ProductServiceGetSaleProcedure,
		svc.GetSale,
		connect.WithSchema(productServiceMethods.ByName("GetSale")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListSalesHandler := connect.NewUnaryHandler(
		ProductServiceListSalesProcedure,
		svc.ListSales,
		connect.WithSchema(productServiceMethods.ByName("ListSales")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateSaleHandler := connect.NewUnaryHandler(
		ProductServiceCreateSaleProcedure,
		svc.CreateSale,
		connect.WithSchema(productServiceMethods.ByName("CreateSale")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateSaleHandler := connect.NewUnaryHandler(
		ProductServiceUpdateSaleProcedure,
		svc.UpdateSale,
		connect.WithSchema(productServiceMethods.ByName("UpdateSale")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteSaleHandler := connect.NewUnaryHandler(
		ProductServiceDeleteSaleProcedure,
		svc.DeleteSale,
		connect.WithSchema(productServiceMethods.ByName("DeleteSale")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceGetTagHandler := connect.NewUnaryHandler(
		ProductServiceGetTagProcedure,
		svc.GetTag,
		connect.WithSchema(productServiceMethods.ByName("GetTag")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceListTagsHandler := connect.NewUnaryHandler(
		ProductServiceListTagsProcedure,
		svc.ListTags,
		connect.WithSchema(productServiceMethods.ByName("ListTags")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateTagHandler := connect.NewUnaryHandler(
		ProductServiceCreateTagProcedure,
		svc.CreateTag,
		connect.WithSchema(productServiceMethods.ByName("CreateTag")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceUpdateTagHandler := connect.NewUnaryHandler(
		ProductServiceUpdateTagProcedure,
		svc.UpdateTag,
		connect.WithSchema(productServiceMethods.ByName("UpdateTag")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceDeleteTagHandler := connect.NewUnaryHandler(
		ProductServiceDeleteTagProcedure,
		svc.DeleteTag,
		connect.WithSchema(productServiceMethods.ByName("DeleteTag")),
		connect.WithHandlerOptions(opts...),
	)
	return "/product.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceGetProductModelProcedure:
			productServiceGetProductModelHandler.ServeHTTP(w, r)
		case ProductServiceListProductModelsProcedure:
			productServiceListProductModelsHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductModelProcedure:
			productServiceCreateProductModelHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductModelProcedure:
			productServiceUpdateProductModelHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductModelProcedure:
			productServiceDeleteProductModelHandler.ServeHTTP(w, r)
		case ProductServiceListProductTypesProcedure:
			productServiceListProductTypesHandler.ServeHTTP(w, r)
		case ProductServiceGetProductProcedure:
			productServiceGetProductHandler.ServeHTTP(w, r)
		case ProductServiceListProductsProcedure:
			productServiceListProductsHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductProcedure:
			productServiceCreateProductHandler.ServeHTTP(w, r)
		case ProductServiceUpdateProductProcedure:
			productServiceUpdateProductHandler.ServeHTTP(w, r)
		case ProductServiceDeleteProductProcedure:
			productServiceDeleteProductHandler.ServeHTTP(w, r)
		case ProductServiceGetBrandProcedure:
			productServiceGetBrandHandler.ServeHTTP(w, r)
		case ProductServiceListBrandsProcedure:
			productServiceListBrandsHandler.ServeHTTP(w, r)
		case ProductServiceCreateBrandProcedure:
			productServiceCreateBrandHandler.ServeHTTP(w, r)
		case ProductServiceUpdateBrandProcedure:
			productServiceUpdateBrandHandler.ServeHTTP(w, r)
		case ProductServiceDeleteBrandProcedure:
			productServiceDeleteBrandHandler.ServeHTTP(w, r)
		case ProductServiceGetSaleProcedure:
			productServiceGetSaleHandler.ServeHTTP(w, r)
		case ProductServiceListSalesProcedure:
			productServiceListSalesHandler.ServeHTTP(w, r)
		case ProductServiceCreateSaleProcedure:
			productServiceCreateSaleHandler.ServeHTTP(w, r)
		case ProductServiceUpdateSaleProcedure:
			productServiceUpdateSaleHandler.ServeHTTP(w, r)
		case ProductServiceDeleteSaleProcedure:
			productServiceDeleteSaleHandler.ServeHTTP(w, r)
		case ProductServiceGetTagProcedure:
			productServiceGetTagHandler.ServeHTTP(w, r)
		case ProductServiceListTagsProcedure:
			productServiceListTagsHandler.ServeHTTP(w, r)
		case ProductServiceCreateTagProcedure:
			productServiceCreateTagHandler.ServeHTTP(w, r)
		case ProductServiceUpdateTagProcedure:
			productServiceUpdateTagHandler.ServeHTTP(w, r)
		case ProductServiceDeleteTagProcedure:
			productServiceDeleteTagHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) GetProductModel(context.Context, *connect.Request[v1.GetProductModelRequest]) (*connect.Response[v1.GetProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProductModels(context.Context, *connect.Request[v1.ListProductModelsRequest]) (*connect.Response[v1.ListProductModelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProductModels is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProductModel(context.Context, *connect.Request[v1.CreateProductModelRequest]) (*connect.Response[v1.CreateProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProductModel(context.Context, *connect.Request[v1.UpdateProductModelRequest]) (*connect.Response[v1.UpdateProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProductModel(context.Context, *connect.Request[v1.DeleteProductModelRequest]) (*connect.Response[v1.DeleteProductModelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProductModel is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProductTypes(context.Context, *connect.Request[v1.ListProductTypesRequest]) (*connect.Response[v1.ListProductTypesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProductTypes is not implemented"))
}

func (UnimplementedProductServiceHandler) GetProduct(context.Context, *connect.Request[v1.GetProductRequest]) (*connect.Response[v1.GetProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) ListProducts(context.Context, *connect.Request[v1.ListProductsRequest]) (*connect.Response[v1.ListProductsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateProduct(context.Context, *connect.Request[v1.UpdateProductRequest]) (*connect.Response[v1.UpdateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteProduct(context.Context, *connect.Request[v1.DeleteProductRequest]) (*connect.Response[v1.DeleteProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteProduct is not implemented"))
}

func (UnimplementedProductServiceHandler) GetBrand(context.Context, *connect.Request[v1.GetBrandRequest]) (*connect.Response[v1.GetBrandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetBrand is not implemented"))
}

func (UnimplementedProductServiceHandler) ListBrands(context.Context, *connect.Request[v1.ListBrandsRequest]) (*connect.Response[v1.ListBrandsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListBrands is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateBrand(context.Context, *connect.Request[v1.CreateBrandRequest]) (*connect.Response[v1.CreateBrandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateBrand is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateBrand(context.Context, *connect.Request[v1.UpdateBrandRequest]) (*connect.Response[v1.UpdateBrandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateBrand is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteBrand(context.Context, *connect.Request[v1.DeleteBrandRequest]) (*connect.Response[v1.DeleteBrandResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteBrand is not implemented"))
}

func (UnimplementedProductServiceHandler) GetSale(context.Context, *connect.Request[v1.GetSaleRequest]) (*connect.Response[v1.GetSaleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetSale is not implemented"))
}

func (UnimplementedProductServiceHandler) ListSales(context.Context, *connect.Request[v1.ListSalesRequest]) (*connect.Response[v1.ListSalesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListSales is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateSale(context.Context, *connect.Request[v1.CreateSaleRequest]) (*connect.Response[v1.CreateSaleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateSale is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateSale(context.Context, *connect.Request[v1.UpdateSaleRequest]) (*connect.Response[v1.UpdateSaleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateSale is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteSale(context.Context, *connect.Request[v1.DeleteSaleRequest]) (*connect.Response[v1.DeleteSaleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteSale is not implemented"))
}

func (UnimplementedProductServiceHandler) GetTag(context.Context, *connect.Request[v1.GetTagRequest]) (*connect.Response[v1.GetTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.GetTag is not implemented"))
}

func (UnimplementedProductServiceHandler) ListTags(context.Context, *connect.Request[v1.ListTagsRequest]) (*connect.Response[v1.ListTagsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.ListTags is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateTag(context.Context, *connect.Request[v1.CreateTagRequest]) (*connect.Response[v1.CreateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.CreateTag is not implemented"))
}

func (UnimplementedProductServiceHandler) UpdateTag(context.Context, *connect.Request[v1.UpdateTagRequest]) (*connect.Response[v1.UpdateTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.UpdateTag is not implemented"))
}

func (UnimplementedProductServiceHandler) DeleteTag(context.Context, *connect.Request[v1.DeleteTagRequest]) (*connect.Response[v1.DeleteTagResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("product.v1.ProductService.DeleteTag is not implemented"))
}
